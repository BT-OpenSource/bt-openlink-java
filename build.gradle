plugins {
    id "org.sonarqube" version "2.5"
    id "com.jfrog.bintray" version "1.7.3"
    id "com.jfrog.artifactory" version "4.5.2"
}

allprojects {
    group = 'com.bt.openlink'
    version = '0.0.2'
}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.jfrog.artifactory'

    repositories {
        jcenter()
    }

    def snapshotBuild = project.version.toUpperCase().contains('SNAPSHOT')
    def releaseBuild = !snapshotBuild

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    sourceSets {
        // Make the compileOnly dependencies available when compiling/running tests
        test.compileClasspath += configurations.compileOnly
        test.runtimeClasspath += configurations.compileOnly
    }

    javadoc {
        source = sourceSets.main.allSource
        classpath = configurations.compile + configurations.compileOnly
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publications = ['Maven']
        dryRun = false
        publish = false
        override = false
        pkg {
            repo = 'bt-openlink'
            name = 'bt-openlink-java'
//        userOrg = 'myorg' //An optional organization name when the repo belongs to one of the user's orgs
//        desc = 'what a fantastic package indeed!'
            websiteUrl = 'https://github.com/BT-OpenSource/bt-openlink-java'
            issueTrackerUrl = 'https://github.com/BT-OpenSource/bt-openlink-java/issues'
            vcsUrl = 'https://github.com/BT-OpenSource/bt-openlink-java.git'
            licenses = ['MIT']
            labels = ['Openlink']
            publicDownloadNumbers = true
//        attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes

            githubRepo = 'BT-OpenSource/bt-openlink-java' //Optional Github repository
            githubReleaseNotesFile = 'README.md' //Optional Github readme file


//        version {
//            name = '1.0-Final'
//        }
        }
    }

    publishing {
        publications {
            Maven(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', project.name)
                    root.appendNode('description', project.ext.description)
                    root.appendNode('url', 'https://github.com/BT-OpenSource/bt-openlink-java')
                }
            }
        }
    }

    bintrayUpload.onlyIf { releaseBuild }

    artifactory {
        contextUrl = 'https://oss.jfrog.org/oss-snapshot-local'
        publish {
            repository {
                repoKey = project.group
                username = System.getenv('BINTRAY_USER')
                password = System.getenv('BINTRAY_KEY')
            }
            defaults {
                //List of Gradle Publications (names or objects) from which to collect the list of artifacts to be deployed to Artifactory.
//                publications('ivyJava', 'mavenJava', 'foo')
                ////List of Gradle Configurations (names or objects) from which to collect the list of artifacts to be deployed to Artifactory.
                publishConfigs('archives')
                //properties = ['qa.level': 'basic', 'q.os': 'win32, deb, osx']
                //Optional map of properties to attach to all published artifacts
                /*
                The properties closure in the "defaults" task uses the following syntax:
                properties {
                    publicationName 'group:module:version:classifier@type', key1:'value1', key2:'value2', ...
                }
                publicationName: A valid name for a publication of the project. You can use all to apply the properties to all publications.
                group:module:version:classifier@type: A filter that specifies the artifacts to which properties should be attached.
                The filter may contain wildcards: * for all characters or ? for a single character.
                key:'value': A list of key/value properties that will be attached to to the published artifacts matching the filter.
                */
//                properties {
//                    //Optional closure to attach properties to artifacts based on a list of artifact patterns per project publication
//                    foo '*:*:*:*@*', platform: 'linux', 'win64'
//                    //The property platform=linux,win64 will be set on all artifacts in foo publication
//                    mavenJava 'org.jfrog:*:*:*@*', key1: 'val1'
//                    //The property key1=val1 will be set on all artifacts part of the mavenJava publication and with group org.jfrog
//                    all 'org.jfrog:shared:1.?:*@*', key2: 'val2', key3: 'val3'
//                    //The properties key2 and key3 will be set on all published artifacts (all publications) with group:artifact:version
//                    //equal to org.jfrog:shared:1.?
//                }
                publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
                publishArtifacts = true   //Publish artifacts to Artifactory (true by default)
                publishPom = true   //Publish generated POM files to Artifactory (true by default).
                publishIvy = true   //Publish generated Ivy descriptor files to Artifactory (true by default).
            }
        }
//        resolve {
//            contextUrl = 'http://repo.myorg.com/artifactory'   //The base Artifactory URL for the resolver
//            repository {
//                +repoKey = 'libs-releases'  //The Artifactory (preferably virtual) repository key to resolve from
//                username = 'resolver'       //Optional resolver user name (leave out to use anonymous resolution)
//                password = 'resolverPaS*'   //The resolver password
//                maven = true                //Resolve Maven-style artifacts and descriptors (true by default)
//            }
//        }
        // Redefine basic properties of the build info object
//        clientConfig.setIncludeEnvVars(true)
//        clientConfig.setEnvVarsExcludePatterns('*password*,*secret*,*KEY*')
//        clientConfig.setEnvVarsIncludePatterns('*not-secret*')
//        clientConfig.info.addEnvironmentProperty('test.adding.dynVar', new java.util.Date().toString())
//        clientConfig.info.setBuildName('new-strange-name')
//        clientConfig.info.setBuildNumber('' + new java.util.Random(System.currentTimeMillis()).nextInt(20000))
    }

    artifactoryPublish.onlyIf { snapshotBuild }
}

